#include"bgt_compat.nvgt"
#include"sound_pool.nvgt"
#include"includes/key_hold.nvgt"
#include"includes/form.nvgt"
#include"includes/m_pro.nvgt"
#include"includes/speech.nvgt"
#include"includes/text_input.nvgt"
double autocooky=0, difmod=1, coins=100, cookies=0, cookymod=20*difmod, cookiesrequiered=10, cookyspeed=0, hunger=0, maxhunger=10000, levcoins=0, manulcooky=0, rank=1;
double autoCostScaling=1.2, speedCostScaling=1.3, manuleCostScaling=1.1, autoCostBase=200, speedCostBase=300, manuleCostBase=100;
int bakemode=0,  clicktime=1000-cookyspeed, sfx=1;
timer clicktimer;
audio_form form;
dynamic_menu_pro m;
sound_pool pool;
text_input input;
double calculateAutoCost(double currentAmount, double amountToBuy)
{
    double totalCost = 0;
    for(uint i = 0; i < amountToBuy; i++)
    {
        totalCost += autoCostBase * pow(autoCostScaling, currentAmount + i);
    }
    return totalCost;
}
double calculateSpeedCost(double currentAmount, double amountToBuy)
{
    double totalCost = 0;
    for(uint i = 0; i < amountToBuy; i++)
    {
        totalCost += speedCostBase * pow(speedCostScaling, currentAmount + i);
    }
    return totalCost;
}
double calculateManuleCost(double currentAmount, double amountToBuy)
{
    double totalCost=0;
    for(uint i = 0; i < amountToBuy; i++)
    {
        totalCost += manuleCostBase * pow(manuleCostScaling, currentAmount + i);
    }
    return totalCost;
}
double min(double a, double b)
{
    return (a < b) ? a : b;
}
string convert_to_currency(double number, string currency_symbol)
{
if (number < 0) return "";
uint dollars = number / 100;
uint cents = number % 100;
string cents_str = "" + cents;
	if (string_len (cents_str) == 1) cents_str = "0" + cents_str;
return currency_symbol + dollars + "." + cents_str;
}
void main()
{
show_game_window("CookyCraze");
clicker();
}
void dlg(string message, int timeout=-1)
{
timer timeouter;
speak(message);
while(true)
{
if (timeout>-1 and timeouter.elapsed>=timeout)
return;
if (key_pressed(KEY_C))
{
speak("Copied");
clipboard_copy_text(message);
}
if (key_pressed(KEY_LEFT) or key_pressed(KEY_RIGHT) or key_pressed(KEY_UP) or key_pressed(KEY_DOWN))
{
speak(message);
}
if (key_pressed(KEY_RETURN))
{
break;
}
wait(5);
}
}
void setupmenu()
{
m.reset(false);
m.enable_up_and_down=false;
m.enable_left_and_right=true;
m.enable_home_and_end=true;
m.enable_first_letter_navigation=true;
m.enable_numbers=true;
m.enable_side_scrolling=false;
m.speak_position_information=false;
m.wrap=true;
m.click_sound="sounds/menuclick.ogg";
m.enter_sound="sounds/menuenter.ogg";
m.open_sound="sounds/menuopen.ogg";
m.wrap_sound="sounds/menuwrap.ogg";
}
void shopmenu()
{
setupmenu();
m.add_item_tts("buy upgrades", "bmu");
m.add_item_tts("sell cookies", "slm");
m.add_item_tts("back", "back");
int mres=m.run("Welcome to the cooky store. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
return;
}
if(stm=="bmu")
{
buymenu();
}
if(stm=="slm")
{
sellmenu();
}
if(stm=="back")
{
return;
}
}
void buymenu()
{
setupmenu();
m.add_item_tts("automatic baking items", "abi");
m.add_item_tts("manule baking items", "mabi");
m.add_item_tts("back", "back");
int mres=m.run("Upgrades menu. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
shopmenu();
}
if(stm=="abi")
{
abimenu();
}
if(stm=="mabi")
{
mabimenu();
}
if(stm=="back")
{
shopmenu();
}
}
void abimenu()
{
    setupmenu();
    double nextAutoCost = autoCostBase * pow(autoCostScaling, autocooky);
    double nextSpeedCost = speedCostBase * pow(speedCostScaling, cookyspeed);
    double remainingCoins = coins;
    double autoAffordable = 0;
    double speedAffordable = 0;
    double currentAutoCost = nextAutoCost;
    while (remainingCoins >= currentAutoCost)
    {
        remainingCoins -= currentAutoCost;
        autoAffordable++;
        currentAutoCost = autoCostBase * pow(autoCostScaling, autocooky + autoAffordable);
    }
    remainingCoins = coins;
    double currentSpeedCost = nextSpeedCost;
    while (remainingCoins >= currentSpeedCost)
    {
        remainingCoins -= currentSpeedCost;
        speedAffordable++;
        currentSpeedCost = speedCostBase * pow(speedCostScaling, cookyspeed + speedAffordable);
    }
    m.add_item_tts("auto cooky, costs " + round(nextAutoCost, 0) + " coins. You can buy " + round(autoAffordable, 0), "abic");
    m.add_item_tts("auto cooky speed, costs " + round(nextSpeedCost, 0) + " coins. You can buy " + round(speedAffordable, 0), "sabic");
    m.add_item_tts("back", "back");
    int mres = m.run("Automatic baking menu.", true);
    string abm = m.get_item_name(mres);
    if (mres == 0)
    {
        buymenu();
        return;
    }
    if (abm == "abic")
    {
input.set_only_allowed_chars("1234567890");
string autoclick = input.input("How many auto cookies would you like to buy?", "");
        if (autoclick.is_empty())
        {
            dlg("Error: No amount entered.");
            return;
        }
        double amount = string_to_number(autoclick);
        double totalCost = calculateAutoCost(autocooky, amount);
        if (coins >= totalCost)
        {
            coins -= totalCost;
            autocooky += amount;
            double nextCost = autoCostBase * pow(autoCostScaling, autocooky);
pool.play_stationary("sounds/buy"+random(1,4)+".ogg",false);
speak("Purchase successful! You now have " + autocooky + " auto cookies. Next one will cost " + round(nextCost, 0) + " coins.");
        }
        else
        {
            dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
        } 
return;
    }
    if (abm == "sabic")
    {
input.set_only_allowed_chars("1234567890");
string speedclick = input.input("How many cooky speed boosters would you like to buy?", "");
        if (speedclick.is_empty())
        {
            dlg("Error: No amount entered.");
            return;
        }
        double amount = string_to_number(speedclick);
        double totalCost = calculateSpeedCost(cookyspeed, amount);
        if (coins >= totalCost)
        {
            coins -= totalCost;
            cookyspeed += amount;
clicktime -= amount;
            double nextCost = speedCostBase * pow(speedCostScaling, cookyspeed);
pool.play_stationary("sounds/buy"+random(1,4)+".ogg",false);
speak("Purchase successful! Your baking speed has been increased! Next upgrade will cost " + round(nextCost, 0) + " coins.");
        }
        else
        {
            dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
        }
        return;
    }
}
void mabimenu()
{
    setupmenu();
    double nextManuleCost = manuleCostBase * pow(manuleCostScaling, manulcooky);   
    double remainingCoins = coins;
    double manuleAffordable = 0;
    double currentCost = nextManuleCost;
    while (remainingCoins >= currentCost)
{
        remainingCoins -= currentCost;
        manuleAffordable++;
        currentCost = manuleCostBase * pow(manuleCostScaling, manulcooky + manuleAffordable);
    }
    m.add_item_tts("manual cooky, costs " + round(nextManuleCost, 0) + " coins. You can buy " + round(manuleAffordable, 0), "mabic");
    m.add_item_tts("back", "back");
    int mres = m.run("Manual baking menu.", true);
    string mabm = m.get_item_name(mres);
    if (mres == 0) {
        buymenu();
        return;
    }    
    if (mabm == "mabic") {
input.set_only_allowed_chars("1234567890");
string manulclick = input.input("How many manual cookies would you like to buy?", "");
        if (manulclick.is_empty()) {
            dlg("Error: No amount entered.");
            return;
        }
        double amount = string_to_number(manulclick);
        double totalCost = calculateManuleCost(manulcooky, amount);
        if (coins >= totalCost) {
            coins -= totalCost;
            manulcooky += amount;
            double nextCost = manuleCostBase * pow(manuleCostScaling, manulcooky);
pool.play_stationary("sounds/buy"+random(1,4)+".ogg",false);
speak("Purchase successful! You now produce " + manulcooky + " cookies per click! Next upgrade will cost " + round(nextCost, 0) + " coins.");
        } else {
            dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
        }
        return;
    }
}
void sellmenu()
{
    setupmenu();
    m.add_item_tts("cookies, you have " + cookies, "sell");
    m.add_item_tts("back", "back");   
    int mres = m.run("Cookie seller. Each cookie sells for 100 coins.", true);
    string stm = m.get_item_name(mres);
if(mres==0)
{
shopmenu();
return;
}
    if(stm == "sell")
    {
        input.set_only_allowed_chars("1234567890");
        string amountStr = input.input("How many cookies would you like to sell?", "");
        if(amountStr.is_empty())
        {
            dlg("Error: No amount entered.");
            return;
        }   
        double amount = string_to_number(amountStr);
        if(amount <= cookies)
        {
            cookies -= amount;
            double totalCoinsEarned = amount * 100;
            coins += totalCoinsEarned;
                        if (totalCoinsEarned >= 100 && totalCoinsEarned <= 4900)
            {
                pool.play_stationary("sounds/coin1.ogg", false);
            }
            else if (totalCoinsEarned >= 5000 && totalCoinsEarned <= 99900)
            {
                pool.play_stationary("sounds/coin50.ogg", false);
            }
            else if (totalCoinsEarned >= 100000 && totalCoinsEarned <= 999900)
            {
                pool.play_stationary("sounds/coin1000.ogg", false);
            }
            else if (totalCoinsEarned >= 1000000 && totalCoinsEarned <= 4999900)
            {
                pool.play_stationary("sounds/coin10000.ogg", false);
            }
            else if (totalCoinsEarned >= 5000000 && totalCoinsEarned <= 9999900)
            {
                pool.play_stationary("sounds/coin50000.ogg", false);
            }
            else if (totalCoinsEarned >= 10000000)
            {
                pool.play_stationary("sounds/coin100000.ogg", false);
            }           
            speak("Successfully sold " + amount + " cookies for " + round(totalCoinsEarned, 0) + " coins!");
        }
        else
        {
            dlg("Error: You only have " + cookies + " cookies available to sell.");
        }
    }
if(stm=="back")
{
shopmenu();
}
}
void clicker()
{
form.create_window("CookyCraze", false);
int manulbake=form.create_button("bake cookies");
int autobake=form.create_button("baking mode");
int food=form.create_button("eat cookies");
int flip=form.create_button("flip a coin");
int shop=form.create_button("cooky store");
while(true)
{
form.monitor();
wait(5);
if(form.is_pressed(manulbake))
{
if(bakemode==1)
{
speak("You can't manuely produce cookies when you're in baking mode.");
}
else if(bakemode==0)
{
if(manulcooky==0)
{
speak("You need at least 1 manule cooky to start baking cookies.");
}
else if(manulcooky>=1)
{
cookies+=1*manulcooky;
pool.play_stationary("sounds/bake.ogg", false);
}
}
}
if(form.is_pressed(flip))
{
if(coins>=1)
{
string[] coinsides={"heads", "tails"};
string side=coinsides[random(0,coinsides.length()-1)];
pool.destroy_all();
pool.play_stationary("sounds/coin.ogg",false);
speak("you flip a coin. It lands on "+side);
}
else if(coins<=0)
{
speak("You don't have a coin to flip!");
}
}
if(form.is_pressed(shop))
{
if(bakemode==1)
{
speak("You can't enter the cooky store when you're in baking mode.");
}
else if(bakemode==0)
{
shopmenu();
}
}
if(form.is_pressed(food))
{
    if(cookies > 0)
{
        int cookiesToEat = min(100*rank, cookies);
        if(sfx == 1) pool.play_stationary("sounds/chip" + random(1, 3) + ".ogg", false);        
        cookies -= cookiesToEat;
        hunger += cookiesToEat;
if(hunger > maxhunger)
{
            int overeatPenalty = hunger - maxhunger;
pool.destroy_all();
pool.play_stationary("sounds/vomit"+random(1,2)+".ogg",false);
speak("You ate too much! Your hunger exceeds by " + overeatPenalty + " units.");
            hunger = maxhunger-overeatPenalty;
        }
}
    else if(cookies <= 0)
{
        speak("There aren't enough cookies for you to eat.");
    }
}
if(form.is_pressed(autobake))
{
if(autocooky==0)
{
speak("You need at least 1 auto cooky to enable baking mode.");
}
else if(autocooky>=1)
{
if(bakemode==0)
{
bakemode=1;
pool.play_stationary("sounds/toggleon.ogg", false);
speak("Baking mode enabled.");
}
else if(bakemode==1)
{
bakemode=0;
pool.play_stationary("sounds/toggleoff.ogg", false);
speak("Baking mode disabled.");
}
}
}
if(cookies<=0)
{
cookies=0;
}
if(coins<=0)
{
coins=0;
}
if(bakemode==1)
{
if(clicktimer.elapsed>=clicktime)
{
cookies+=1*autocooky;
pool.play_stationary("sounds/bake.ogg", false);
clicktimer.restart();
}
}
if(cookies >= cookiesrequiered)
{
    cookiesrequiered = (cookymod * (rank * (rank * 2)));
    levcoins += 100 * rank;
    rank += 1;
    coins += levcoins;
    if (levcoins >= 1 && levcoins <= 49) {
        pool.play_stationary("sounds/coin1.ogg", false);
    } else if (levcoins >= 50 && levcoins <= 999) {
        pool.play_stationary("sounds/coin50.ogg", false);
    } else if (levcoins >= 1000 && levcoins <= 9999) {
        pool.play_stationary("sounds/coin1000.ogg", false);
    } else if (levcoins >= 10000 && levcoins <= 49999) {
        pool.play_stationary("sounds/coin10000.ogg", false);
    } else if (levcoins >= 50000 && levcoins <= 99999) {
        pool.play_stationary("sounds/coin50000.ogg", false);
    } else if (levcoins >= 100000) {
        pool.play_stationary("sounds/coin100000.ogg", false);
    }
pool.play_stationary("sounds/achievement"+random(1,3)+".ogg",false);
speak("Congratulations! You've successfully made it to rank " + rank + "! You've earned " + round(levcoins, 0) + " coins for your achievement. Great work!");
}
if(key_pressed(KEY_M))
{
speak("You have"+round(coins, 0)+"coins available to spend");
}
if(key_pressed(KEY_R))
{
speak("You're currently rank"+rank+"with"+cookies+"cookies. Your next rank requires"+(cookiesrequiered-cookies)+"cookies");
}
if(key_pressed(KEY_F))
{
if(autocooky==0 and clicktime==1000)
{
speak("You  produce"+autocooky+"cookies per second.");
}
else if(autocooky==0 and clicktime<=999)
{
speak("You  produce"+autocooky+"cookies every"+clicktime+"milliseconds.");
}
else if(autocooky==1 and clicktime==1000)
{
speak("You  produce"+autocooky+"cooky per second.");
}
else if(autocooky==1 and clicktime<=999)
{
speak("You  produce"+autocooky+"cooky every"+clicktime+"milliseconds.");
}
else if(autocooky>=2 and clicktime==1000)
{
speak("You  produce"+autocooky+"cookies per second.");
}
else if(autocooky>=2 and clicktime<=999)
{
speak("You  produce"+autocooky+"cookies every"+clicktime+"milliseconds.");
}
}
if(key_pressed(KEY_C))
{
if(cookies>=0)
{
speak("You baked a total of"+cookies+"cookies.");
}
else if(cookies>=1)
{
speak("You baked a total of"+cookies+"cooky.");
}
else if(cookies>=2)
{
speak("You baked a total of"+cookies+"cookies.");
}
}
if(key_pressed(KEY_H))
{
speak("You are "+round(hunger/maxhunger*100,2)+"percent full from eating cookies.");
}
if(key_pressed(KEY_J))
{
if(manulcooky==0)
{
speak("You  produce"+manulcooky+"cookies per press.");
}
else if(manulcooky==1)
{
speak("You  produce"+manulcooky+"cooky per press.");
}
else if(manulcooky>=2)
{
speak("You  produce"+manulcooky+"cookies per press.");
}
}
if(key_pressed(KEY_ESCAPE))
{
exit();
}
}
}
