void preffsmenu()
{
form.reset();
    form.create_window("preferences", false);
    int audsets = form.create_button("audio settings");
int gamsets = form.create_button("game settings");
form.focus(audsets);
    while (true)
    {
        form.monitor();
        wait(5);
        if (form.is_pressed(gamsets))
        {
gamsetsmenu();
}
        if (form.is_pressed(audsets))
        {
soundsetsmenu();
}
        if (key_pressed(KEY_ESCAPE))
        {
form.reset();
clicker();
}
    }
}
void gamsetsmenu()
{
    string gendertext;
    if (playergender == 0)
{
        gendertext = "Male";
    }
else if (playergender == 1)
{
        gendertext = "Female";
    }
else if (playergender == 2)
{
        gendertext = "Non-binary";
    }
else
{
        gendertext = "Unknown";
    }
    form.reset();
    form.create_window("Game Settings", false);
    int charname = form.create_button("Change the character's first name. Currently set to "+playername+".");
    int charname2 = form.create_button("Change the character's last name. Currently set to "+playername2+".");
    int chargender = form.create_list("Change the character's gender. Currently set to " + gendertext + ".", 3);
    form.add_list_item(chargender, "Male");
    form.add_list_item(chargender, "Female");
    form.add_list_item(chargender, "Non-binary");
    if (playergender >= 0 && playergender <= 2)
{
        form.set_list_position(chargender, playergender);
    }
    int playvents = form.create_checkbox("Enable player events during auto baking.", playervents);
    int playvents2 = form.create_checkbox("Enable player events during manual baking.", playervents2);
    int sail_start_slider = form.create_slider("Cookie sale start percentage.", sailstart, 0, 100, "percent", 1);
    int sail_end_slider = form.create_slider("Cookie sale end percentage.", sailstep, 0, 100, "percent", 1);
int autoChanceSlider = form.create_slider("Auto-Baking Event chance.", 100 - evchanse, 0, 100, "percent", 1);
int manualChanceSlider = form.create_slider("Manual-Baking Event chance.", 100 - evchanse2, 0, 100, "percent", 1);    int savesets = form.create_button("save settings");
form.focus(charname);
    while (true)
    {
        form.monitor();
        wait(5);
        sailstart = form.get_slider(sail_start_slider);
        sailstep = form.get_slider(sail_end_slider);
evchanse = 100 - form.get_slider(autoChanceSlider);
evchanse2 = 100 - form.get_slider(manualChanceSlider);
        playervents = form.is_checked(playvents);
        playervents2 = form.is_checked(playvents2);
playergender = form.get_list_position(chargender);
        if (form.is_pressed(charname))
        {
string fn=input.input("Enter the first name of this character.");
if(fn.is_empty())
{
dlg("Error. Your character's first name is invalid!");
            form.reset();
            gamsetsmenu();
}
else
{
playername=fn;
            dlg("Success! Your character's first name has now been changed to "+playername+".");
            form.reset();
            gamsetsmenu();
}
}
        if (form.is_pressed(charname2))
        {
string fn2=input.input("Enter the last name of this character.");
if(fn2.is_empty())
{
dlg("Error. Your character's last name is invalid!");
            form.reset();
            gamsetsmenu();
}
else
{
playername2=fn2;
            dlg("Success! Your character's last name has now been changed to "+playername2+".");
            form.reset();
            gamsetsmenu();
}
}
        if (form.is_pressed(savesets))
        {
            writepreffs();
            dlg("settings saved");
            form.reset();
            clicker();
        }
        if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
    }
}
void soundsetsmenu()
{
form.reset();
    form.create_window("audio settings", false);
int ambienceVolumeSlider = form.create_slider("ambience volume", (ambvolume + 50) * 2, 0, 100, "percent", 1);
int ambiencePitchSlider = form.create_slider("Ambience pitch", ambpitch / 2, 0, 100, "percent", 1);
int musicVolumeSlider = form.create_slider("Music volume", (musvolume + 50) * 2, 0, 100, "percent", 1);
int musicPitchSlider = form.create_slider("Music pitch", muspitch / 2, 0, 100, "percent", 1);
int shuffleamb = form.create_button("change ambience");
int shufflemus = form.create_button("change music track");
    int savesets = form.create_button("save settings");
form.focus(ambienceVolumeSlider);
    while (true)
    {
        form.monitor();
        wait(5);
ambvolume = (form.get_slider(ambienceVolumeSlider) / 2) - 50;
ambpitch = form.get_slider(ambiencePitchSlider) * 2;
musvolume = (form.get_slider(musicVolumeSlider) / 2) - 50;
muspitch = form.get_slider(musicPitchSlider) * 2;
        pool.update_sound_start_values(ambslot, 0, ambvolume, ambpitch);
        pool.update_sound_start_values(trackslot, 0, musvolume, muspitch);
        if (form.is_pressed(shuffleamb))
        {
string ambsound="room"+random(1,4)+".ogg";
pool.destroy_sound(ambslot);
ambslot=pool.play_stationary_extended(ambsound, true,0,0,musvolume,100,false);
    string dispamb = string_replace(ambsound, "", "", true);
    dispamb = string_replace(dispamb, ".ogg", "", true);
speak(dispamb);
    }
        if (form.is_pressed(shufflemus))
        {
string mustrack="music"+random(1,23)+".ogg";
pool.destroy_sound(trackslot);
trackslot=pool.play_stationary_extended(mustrack, true,0,0,musvolume,100,false);
    string disptrack = string_replace(mustrack, "", "", true);
    disptrack = string_replace(disptrack, ".ogg", "", true);
speak(disptrack);
    }
        if (form.is_pressed(savesets))
        {
writepreffs();
dlg("settings saved");
form.reset();
clicker();
}
        if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
    }
}
void shopmenu()
{
setupmenu2();
m.add_item_tts("buy upgrades", "bmu");
m.add_item_tts("sell cookies", "slm");
m.add_item_tts("back", "back");
int mres=m.run("Welcome to the cooky store. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
}
if(stm=="bmu")
{
buymenu();
}
if(stm=="slm")
{
sellmenu();
}
if(stm=="back")
{
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
}
}
void buymenu()
{
setupmenu2();
m.add_item_tts("automatic baking items", "abi");
m.add_item_tts("manule baking items", "mabi");
m.add_item_tts("back", "back");
int mres=m.run("Upgrades menu. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
shopmenu();
}
if(stm=="abi")
{
abimenu();
}
if(stm=="mabi")
{
mabimenu();
}
if(stm=="back")
{
shopmenu();
}
}
void abimenu()
{
    setupmenu2();
    double nextAutoCost = autoCostBase * pow(autoCostScaling, autocooky);
    double nextSpeedCost = speedCostBase * pow(speedCostScaling, cookyspeed);
    double remainingCoins = coins;
    double autoAffordable = 0;
    double speedAffordable = 0;
    double currentAutoCost = nextAutoCost;
    while (remainingCoins >= currentAutoCost)
    {
        remainingCoins -= currentAutoCost;
        autoAffordable++;
        currentAutoCost = autoCostBase * pow(autoCostScaling, autocooky + autoAffordable);
    }
    remainingCoins = coins;
    double currentSpeedCost = nextSpeedCost;
    while (remainingCoins >= currentSpeedCost)
    {
        remainingCoins -= currentSpeedCost;
        speedAffordable++;
        currentSpeedCost = speedCostBase * pow(speedCostScaling, cookyspeed + speedAffordable);
    }
    m.add_item_tts("auto cooky, costs " + round(nextAutoCost, 0) + " coins. You can buy " + round(autoAffordable, 0), "abic");
    m.add_item_tts("auto cooky speed, costs " + round(nextSpeedCost, 0) + " coins. You can buy " + round(speedAffordable, 0), "sabic");
    m.add_item_tts("back", "back");
    int mres = m.run("Automatic baking menu.", true);
    string abm = m.get_item_name(mres);
    if (mres == 0)
    {
        buymenu();
    }
    if (abm == "abic")
    {
input.set_only_allowed_chars("1234567890");
string autoclick = input.input("How many auto cookies would you like to buy?", "");
        if (autoclick.is_empty())
        {
pool.destroy_sound(alertslot);
pool.play_stationary("error.ogg",false);
            dlg("Error: No amount entered.");
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
        }
        double amount = string_to_number(autoclick);
        double totalCost = calculateAutoCost(autocooky, amount);
        if (coins >= totalCost)
        {
            coins -= totalCost;
            autocooky += amount;
            double nextCost = autoCostBase * pow(autoCostScaling, autocooky);
pool.play_stationary("buy"+random(1,4)+".ogg",false);
dlg("Purchase successful! You now have " + autocooky + " auto cookies. Next one will cost " + round(nextCost, 0) + " coins.");
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
        }
        else
        {
pool.destroy_sound(alertslot);
pool.play_stationary("error.ogg",false);
            dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
        } 
    }
if (abm == "sabic")
{
    input.set_only_allowed_chars("1234567890");
    string speedclick = input.input("How many cooky speed boosters would you like to buy?", "");
    if (speedclick.is_empty())
    {
pool.destroy_sound(alertslot);
pool.play_stationary("error.ogg",false);
        dlg("Error: No amount entered.");
        pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
        dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
    }
    double amount = string_to_number(speedclick);
    double totalCost = calculateSpeedCost(cookyspeed, amount);
    if (coins >= totalCost)
    {
        coins -= totalCost;
        cookyspeed += amount;
        clicktime -= amount * 5;       
        clicktime = max(50, clicktime);
        double nextCost = speedCostBase * pow(speedCostScaling, cookyspeed);
        pool.play_stationary("buy"+random(1,4)+".ogg", false);
        dlg("Purchase successful! Your baking speed has been increased! Next upgrade will cost " + round(nextCost, 0) + " coins.");
        pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
        dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
    }
    else
    {
pool.destroy_sound(alertslot);
pool.play_stationary("error.ogg",false);
        dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
        pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
        dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
    }
}
    if (abm == "back")
{
buymenu();
}
}
void mabimenu()
{
    setupmenu2();
    double nextManuleCost = manuleCostBase * pow(manuleCostScaling, manulcooky);   
    double remainingCoins = coins;
    double manuleAffordable = 0;
    double currentCost = nextManuleCost;
    while (remainingCoins >= currentCost)
{
        remainingCoins -= currentCost;
        manuleAffordable++;
        currentCost = manuleCostBase * pow(manuleCostScaling, manulcooky + manuleAffordable);
    }
    m.add_item_tts("manual cooky, costs " + round(nextManuleCost, 0) + " coins. You can buy " + round(manuleAffordable, 0), "mabic");
    m.add_item_tts("back", "back");
    int mres = m.run("Manual baking menu.", true);
    string mabm = m.get_item_name(mres);
    if (mres == 0)
{
        buymenu();
    }    
    if (mabm == "mabic")
{
input.set_only_allowed_chars("1234567890");
string manulclick = input.input("How many manual cookies would you like to buy?", "");
        if (manulclick.is_empty())
{
pool.destroy_sound(alertslot);
pool.play_stationary("error.ogg",false);
            dlg("Error: No amount entered.");
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
        }
        double amount = string_to_number(manulclick);
        double totalCost = calculateManuleCost(manulcooky, amount);
        if (coins >= totalCost)
{
            coins -= totalCost;
            manulcooky += amount;
            double nextCost = manuleCostBase * pow(manuleCostScaling, manulcooky);
pool.play_stationary("buy"+random(1,4)+".ogg",false);
dlg("Purchase successful! You now produce " + manulcooky + " cookies per click! Next upgrade will cost " + round(nextCost, 0) + " coins.");
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
        }
else
{
pool.destroy_sound(alertslot);
pool.play_stationary("error.ogg",false);
            dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambslot=pool.play_stationary_extended("room"+random(1,4)+".ogg", true,0,0,ambvolume,ambpitch,false);
trackslot=pool.play_stationary_extended("music"+random(1,23)+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clicker();
        }
    }
    if (mabm == "back")
{
buymenu();
}
}
void sellmenu()
{
s.enable_beeps = true;
s.speak_percentages = true;
create_slider();
    s.add_slider_item("sail amount", 0, 100, sailstart, sailstep);
    int sres = s.run_slider("Choose the percentage of cookies you'd like to sell:", 0);
    if (sres == 0)
    {
        pool.resume_sound(ambslot);
        pool.resume_sound(trackslot);
        speak("Canceled");
form.reset();
clicker();
    }
    double percentToSell = s.get_item_value(0);
    int cookiesToSell = int(cookies * (percentToSell / 100.0));
    if (cookiesToSell <= 0 && percentToSell > 0) {
        cookiesToSell = 1;
    }
    double totalCoinsEarned = cookiesToSell * 10;
    if (cookiesToSell > cookies)
    {
pool.destroy_sound(alertslot);
pool.play_stationary("error.ogg",false);
        dlg("Error: You only have " + cookies + " cookies available to sell.");
        pool.destroy_sound(alertslot);
        pool.destroy_sound(storslot);
        speak("You're now exiting the cooky store.");
        dlgplay("store_door_close.ogg");
        ambslot = pool.play_stationary_extended("room" + random(1, 4) + ".ogg", true, 0, 0, ambvolume, 100, false);
        trackslot = pool.play_stationary_extended("music" + random(1, 23) + ".ogg", true, 0, 0, musvolume, 100, false);
form.reset();
clicker();
    }
    cookies -= cookiesToSell;
    coins += totalCoinsEarned;
    if (totalCoinsEarned >= 10 && totalCoinsEarned <= 490)
{
        pool.play_stationary("coin1.ogg", false);
    } else if (totalCoinsEarned >= 500 && totalCoinsEarned <= 9990)
{
        pool.play_stationary("coin50.ogg", false);
    } else if (totalCoinsEarned >= 10000 && totalCoinsEarned <= 99990)
{
        pool.play_stationary("coin1000.ogg", false);
    } else if (totalCoinsEarned >= 100000 && totalCoinsEarned <= 499990)
{
        pool.play_stationary("coin10000.ogg", false);
    } else if (totalCoinsEarned >= 500000 && totalCoinsEarned <= 999990)
{
        pool.play_stationary("coin50000.ogg", false);
    } else if (totalCoinsEarned >= 1000000 && totalCoinsEarned <= 9999990)
{
        pool.play_stationary("coin100000.ogg", false);
    } else if (totalCoinsEarned >= 10000000)
{
        pool.play_stationary("coin100000.ogg", false);
    }
    dlg("Successfully sold " + cookiesToSell + " cookies for " + round(totalCoinsEarned, 0) + " coins!");
    pool.destroy_sound(alertslot);
    pool.destroy_sound(storslot);
    speak("You're now exiting the cooky store.");
    dlgplay("store_door_close.ogg");
    ambslot = pool.play_stationary_extended("room" + random(1, 4) + ".ogg", true, 0, 0, ambvolume, 100, false);
    trackslot = pool.play_stationary_extended("music" + random(1, 23) + ".ogg", true, 0, 0, musvolume, 100, false);
form.reset();
clicker();
}
