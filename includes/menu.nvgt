void effectsmenu(bool anounce_percentage=true)
{
if(anounce_percentage==true) s.speak_percentages=true;
else if(anounce_percentage==false) s.speak_percentages=false;
create_slider();
s.add_slider_item("ambience volume", -100.0, 0.0, 0.0, 1.0);
s.add_slider_item("music volume", -100.0, 0.0, 0.0, 1.0);
int sres = s.run_slider("Effects designer. Press tab or shift tab to cycle through the effect parameters. Press the arrow keys to increase or decrease the value you're currently focused on. Press the home or end key to directly jump to the minimum or maximum value of the parameter. Press the enter key when you're done shaping the effect to your liking.");
if (sres==0)
{
pool.resume_sound(ambslot);
pool.resume_sound(trackslot);
speak("Canceled");
return;
}
pool.resume_sound(ambslot);
pool.resume_sound(trackslot);
ambvolume=s.get_item_value(0);
musvolume=s.get_item_value(1);
}
void soundsetsmenu()
{
    form.create_window("audio settings", false);
    int ambienceSlider = form.create_slider("Ambience Volume", ambvolume, -100, 0, "DB", 1);
    int musicSlider = form.create_slider("Music Volume", musvolume, -100, 0, "DB", 1);
int shuffleamb = form.create_button("change ambience");
int shufflemus = form.create_button("change music");
    int savesets = form.create_button("Save settings");
    while (true)
    {
        form.monitor();
        wait(5);
        ambvolume = form.get_slider(ambienceSlider);
        musvolume = form.get_slider(musicSlider);
        pool.update_sound_start_values(ambslot, 0, ambvolume, 100);
        pool.update_sound_start_values(trackslot, 0, musvolume, 100);
        if (form.is_pressed(shuffleamb))
        {
string ambsound="sounds/room"+random(1,4)+".ogg";
pool.destroy_sound(ambslot);
ambslot=pool.play_stationary_extended(ambsound, true,0,0,musvolume,100,false);
    string dispamb = string_replace(ambsound, "sounds/", "", true);
    dispamb = string_replace(dispamb, ".ogg", "", true);
speak(dispamb);
    }
        if (form.is_pressed(shufflemus))
        {
string mustrack="sounds/music"+random(1,23)+".ogg";
pool.destroy_sound(trackslot);
trackslot=pool.play_stationary_extended(mustrack, true,0,0,musvolume,100,false);
    string disptrack = string_replace(mustrack, "sounds/", "", true);
    disptrack = string_replace(disptrack, ".ogg", "", true);
speak(disptrack);
    }
        if (form.is_pressed(savesets))
        {
writepreffs();
speak("Settings saved.");
}
    }
}
void shopmenu()
{
setupmenu2();
m.add_item_tts("buy upgrades", "bmu");
m.add_item_tts("sell cookies", "slm");
m.add_item_tts("back", "back");
int mres=m.run("Welcome to the cooky store. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
return;
}
if(stm=="bmu")
{
buymenu();
}
if(stm=="slm")
{
sellmenu();
}
if(stm=="back")
{
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
return;
}
}
void buymenu()
{
setupmenu2();
m.add_item_tts("automatic baking items", "abi");
m.add_item_tts("manule baking items", "mabi");
m.add_item_tts("back", "back");
int mres=m.run("Upgrades menu. Please choose a cattigory to purchis.",true);
string stm=m.get_item_name(mres);
if(mres==0)
{
shopmenu();
}
if(stm=="abi")
{
abimenu();
}
if(stm=="mabi")
{
mabimenu();
}
if(stm=="back")
{
shopmenu();
}
}
void abimenu()
{
    setupmenu2();
    double nextAutoCost = autoCostBase * pow(autoCostScaling, autocooky);
    double nextSpeedCost = speedCostBase * pow(speedCostScaling, cookyspeed);
    double remainingCoins = coins;
    double autoAffordable = 0;
    double speedAffordable = 0;
    double currentAutoCost = nextAutoCost;
    while (remainingCoins >= currentAutoCost)
    {
        remainingCoins -= currentAutoCost;
        autoAffordable++;
        currentAutoCost = autoCostBase * pow(autoCostScaling, autocooky + autoAffordable);
    }
    remainingCoins = coins;
    double currentSpeedCost = nextSpeedCost;
    while (remainingCoins >= currentSpeedCost)
    {
        remainingCoins -= currentSpeedCost;
        speedAffordable++;
        currentSpeedCost = speedCostBase * pow(speedCostScaling, cookyspeed + speedAffordable);
    }
    m.add_item_tts("auto cooky, costs " + round(nextAutoCost, 0) + " coins. You can buy " + round(autoAffordable, 0), "abic");
    m.add_item_tts("auto cooky speed, costs " + round(nextSpeedCost, 0) + " coins. You can buy " + round(speedAffordable, 0), "sabic");
    m.add_item_tts("back", "back");
    int mres = m.run("Automatic baking menu.", true);
    string abm = m.get_item_name(mres);
    if (mres == 0)
    {
        buymenu();
        return;
    }
    if (abm == "abic")
    {
input.set_only_allowed_chars("1234567890");
string autoclick = input.input("How many auto cookies would you like to buy?", "");
        if (autoclick.is_empty())
        {
            dlg("Error: No amount entered.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
            return;
        }
        double amount = string_to_number(autoclick);
        double totalCost = calculateAutoCost(autocooky, amount);
        if (coins >= totalCost)
        {
            coins -= totalCost;
            autocooky += amount;
            double nextCost = autoCostBase * pow(autoCostScaling, autocooky);
pool.play_stationary("sounds/buy"+random(1,4)+".ogg",false);
dlg("Purchase successful! You now have " + autocooky + " auto cookies. Next one will cost " + round(nextCost, 0) + " coins.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
        }
        else
        {
            dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
        } 
return;
    }
if (abm == "sabic")
{
    input.set_only_allowed_chars("1234567890");
    string speedclick = input.input("How many cooky speed boosters would you like to buy?", "");
    if (speedclick.is_empty())
    {
        dlg("Error: No amount entered.");
        pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
        dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
        return;
    }
    double amount = string_to_number(speedclick);
    double totalCost = calculateSpeedCost(cookyspeed, amount);
    if (coins >= totalCost)
    {
        coins -= totalCost;
        cookyspeed += amount;
        clicktime -= amount * 5;       
        clicktime = max(50, clicktime);
        double nextCost = speedCostBase * pow(speedCostScaling, cookyspeed);
        pool.play_stationary("sounds/buy"+random(1,4)+".ogg", false);
        dlg("Purchase successful! Your baking speed has been increased! Next upgrade will cost " + round(nextCost, 0) + " coins.");
        pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
        dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
    }
    else
    {
        dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
        pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
        dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
    }
    return;
}
    if (abm == "back")
{
buymenu();
return;
}
}
void mabimenu()
{
    setupmenu2();
    double nextManuleCost = manuleCostBase * pow(manuleCostScaling, manulcooky);   
    double remainingCoins = coins;
    double manuleAffordable = 0;
    double currentCost = nextManuleCost;
    while (remainingCoins >= currentCost)
{
        remainingCoins -= currentCost;
        manuleAffordable++;
        currentCost = manuleCostBase * pow(manuleCostScaling, manulcooky + manuleAffordable);
    }
    m.add_item_tts("manual cooky, costs " + round(nextManuleCost, 0) + " coins. You can buy " + round(manuleAffordable, 0), "mabic");
    m.add_item_tts("back", "back");
    int mres = m.run("Manual baking menu.", true);
    string mabm = m.get_item_name(mres);
    if (mres == 0)
{
        buymenu();
        return;
    }    
    if (mabm == "mabic")
{
input.set_only_allowed_chars("1234567890");
string manulclick = input.input("How many manual cookies would you like to buy?", "");
        if (manulclick.is_empty())
{
            dlg("Error: No amount entered.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
            return;
        }
        double amount = string_to_number(manulclick);
        double totalCost = calculateManuleCost(manulcooky, amount);
        if (coins >= totalCost)
{
            coins -= totalCost;
            manulcooky += amount;
            double nextCost = manuleCostBase * pow(manuleCostScaling, manulcooky);
pool.play_stationary("sounds/buy"+random(1,4)+".ogg",false);
dlg("Purchase successful! You now produce " + manulcooky + " cookies per click! Next upgrade will cost " + round(nextCost, 0) + " coins.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
        }
else
{
            dlg("Error: Not enough coins! You need " + round((totalCost - coins), 0) + " more coins to buy this.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
        }
        return;
    }
    if (mabm == "back")
{
buymenu();
return;
}
}
void sellmenu()
{
    setupmenu2();
    m.add_item_tts("cookies, you have " + cookies, "sell");
    m.add_item_tts("back", "back");
    int mres = m.run("Cookie seller. Each cookie sells for 10 coins.", true);
    string stm = m.get_item_name(mres);
    if (mres == 0)
{
        shopmenu();
        return;
    }
    if (stm == "sell")
{
        input.set_only_allowed_chars("1234567890");
        string amountStr = input.input("How many cookies would you like to sell?", "");
        if (amountStr.is_empty())
{
            dlg("Error: No amount entered.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
            return;
        }        
        double amount = string_to_number(amountStr);
        if (amount <= cookies)
{
            cookies -= amount;
            double totalCoinsEarned = amount * 10;
            coins += totalCoinsEarned;
if (totalCoinsEarned >= 10 && totalCoinsEarned <= 490)
{
    pool.play_stationary("sounds/coin1.ogg", false);
}
else if (totalCoinsEarned >= 500 && totalCoinsEarned <= 9990)
{
    pool.play_stationary("sounds/coin50.ogg", false);           
}
else if (totalCoinsEarned >= 10000 && totalCoinsEarned <= 99990)
{
    pool.play_stationary("sounds/coin1000.ogg", false);
}
else if (totalCoinsEarned >= 100000 && totalCoinsEarned <= 499990)
{
    pool.play_stationary("sounds/coin10000.ogg", false);
}
else if (totalCoinsEarned >= 500000 && totalCoinsEarned <= 999990)
{
    pool.play_stationary("sounds/coin50000.ogg", false);
}
else if (totalCoinsEarned >= 1000000 && totalCoinsEarned <= 9999990)
{
    pool.play_stationary("sounds/coin100000.ogg", false);
}
else if (totalCoinsEarned >= 10000000)
{
pool.play_stationary("sounds/coin100000.ogg", false);
}
            dlg("Successfully sold " + amount + " cookies for " + round(totalCoinsEarned, 0) + " coins!");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
        }
else
{
            dlg("Error: You only have " + cookies + " cookies available to sell.");
pool.destroy_sound(storslot);
speak("You're now exiting the cooky store.");
dlgplay("sounds/store_door_close.ogg");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
        }
    }
    if (stm == "back")
{
        shopmenu();
    }
}
