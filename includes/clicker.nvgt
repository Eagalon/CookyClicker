void clicker()
{
form.create_window("CookyCraze", false);
int manulbake=form.create_button("bake cookies");
int autobake=form.create_button("baking mode");
int food=form.create_button("eat cookies");
int flip=form.create_button("play coin flip");
int shop=form.create_button("cooky store");
int sets=form.create_button("audio settings");
ambslot=pool.play_stationary_extended("sounds/room"+random(1,4)+".ogg", true,0,0,ambvolume,100,false);
trackslot=pool.play_stationary_extended("sounds/music"+random(1,23)+".ogg", true,0,0,musvolume,100,false);
while(true)
{
form.monitor();
wait(5);
if (form.is_pressed(sets))
{
soundsetsmenu();
}
if(form.is_pressed(autobake))
{
if(autocooky==0)
{
speak("You need at least 1 auto cooky to enable baking mode.");
}
else if(autocooky>=1)
{
if(bakemode==0)
{
bakemode=1;
pool.play_stationary("sounds/toggleon.ogg", false);
speak("Baking mode enabled.");
}
else if(bakemode==1)
{
bakemode=0;
pool.play_stationary("sounds/toggleoff.ogg", false);
speak("Baking mode disabled.");
}
}
}
if(form.is_pressed(manulbake))
{
if(bakemode==1)
{
speak("You can't manuely produce cookies when you're in baking mode.");
}
else if(bakemode==0)
{
if(manulcooky==0)
{
speak("You need at least 1 manule cooky to start baking cookies.");
}
else if(manulcooky>=1)
{
cookies+=1*manulcooky;
pool.play_stationary("sounds/medalbutton" + random(1, 3) + ".ogg", false);
attempt_manebaker_event(60);
}
}
}
if(form.is_pressed(flip))
{
if(rank<10)
{
speak("Sorry "+playername+". This minni game is locked. Please be at rank 10 or higher to play this.");
}
else if(rank>=10)
{
if(coins>=1)
{
string[] coinsides={"heads", "tails"};
string side=coinsides[random(0,coinsides.length()-1)];
pool.pause_sound(ambslot);
pool.pause_sound(trackslot);
pool.play_stationary("sounds/coinflip" + random(1, 2) + ".ogg", false);        
dlg("you flip a coin. It lands on "+side);
pool.resume_sound(ambslot);
pool.resume_sound(trackslot);
        if (side == "heads")
        {
            string[] headsEvents = {"gain_autocooky", "gain_manulcooky", "gain_cookies", "decrease_hunger"};
            string event = headsEvents[random(0, headsEvents.length() - 1)];
            trigger_coin_event(event);
        }
        else if (side == "tails")
        {
            string[] tailsEvents = {"lose_autocooky", "lose_manulcooky", "lose_cookies", "increase_hunger"};
            string event = tailsEvents[random(0, tailsEvents.length() - 1)];
            trigger_coin_event(event);
        }
    }
else if(coins<=0)
{
speak("You don't have a coin to flip!");
}
}
}
if(form.is_pressed(shop))
{
if(bakemode==1)
{
speak("You can't enter the cooky store when you're in baking mode.");
}
else if(bakemode==0)
{
if(coins<10)
{
speak("You need at least 10 coins to enter the cooky store.");
}
else if(coins>=10)
{
pool.destroy_sound(ambslot);
pool.destroy_sound(trackslot);
speak("You're now entering the cooky store.");
dlgplay("sounds/store_door_open.ogg");
alertslot=pool.play_stationary("sounds/store_welcome.ogg",false);
storslot=pool.play_stationary("sounds/store_amb.ogg",true);
shopmenu();
}
}
}
if(form.is_pressed(food))
{
    if(cookies > 0)
{
        int cookiesToEat = min(100*rank, cookies);
        pool.play_stationary("sounds/chip" + random(1, 3) + ".ogg", false);        
        cookies -= cookiesToEat;
        hunger += cookiesToEat;
if(hunger > maxhunger)
{
            int overeatPenalty = hunger - maxhunger;
pool.destroy_sound(alertslot);
alertslot=pool.play_stationary("sounds/vomit"+random(1,2)+".ogg",false);
speak("You ate too much! Your hunger exceeds by " + overeatPenalty + " units.");
            hunger = maxhunger-overeatPenalty;
        }
}
    else if(cookies <= 0)
{
        speak("There aren't enough cookies for you to eat.");
    }
}
if(autocooky<=0)
{
bakemode=0;
autocooky=0;
}
if(coins<=0)
{
coins=0;
}
if(cookies<=0)
{
cookies=0;
}
if(cookyspeed<=0)
{
cookyspeed=0;
}
if(hunger<=0)
{
hunger=0;
}
if(manulcooky<=0)
{
manulcooky=0;
}
if(clicktime<=50)
{
clicktime=50;
}
if(clicktime>=1000)
{
clicktime=1000;
}
if(bakemode==1 and autocooky>=1)
{
if(clicktimer.elapsed>=clicktime)
{
cookies+=1*autocooky;
pool.play_stationary("sounds/bake.ogg", false);
attempt_autobaker_event(30);
clicktimer.restart();
}
else if(bakemode==1 and autocooky<=0)
{
bakemode=0;
pool.destroy_all();
}
}
if (cookies >= cookiesrequiered)
{
    cookiesrequiered = (cookymod * (rank * (rank * difmod)));
    levcoins += 10 * rank;
    rank+=1;
    coins += levcoins;
    if (levcoins >= 1 && levcoins <= 49)
{
        pool.play_stationary("sounds/coin1.ogg", false);
    }
else if (levcoins >= 50 && levcoins <= 999)
{
        pool.play_stationary("sounds/coin50.ogg", false);
    }
else if (levcoins >= 1000 && levcoins <= 9999)
{
        pool.play_stationary("sounds/coin1000.ogg", false);
    }
else if (levcoins >= 10000 && levcoins <= 49999)
{
        pool.play_stationary("sounds/coin10000.ogg", false);
    }
else if (levcoins >= 50000 && levcoins <= 99999)
{
        pool.play_stationary("sounds/coin50000.ogg", false);
    }
else if (levcoins >= 100000 && levcoins <= 999999)
{
        pool.play_stationary("sounds/coin100000.ogg", false);
    }
else if (levcoins >= 1000000)
{
        pool.play_stationary("sounds/coin100000.ogg", false);
    }
    pool.play_stationary("sounds/achievement" + random(1, 2) + ".ogg", false);
    speak("Congratulations! You've successfully made it to rank " + rank + "! You've earned " + round(levcoins, 0) + " coins for your achievement. Great work!");
if(rank==10)
{
levcoins += 10 * rank*2;
pool.play_stationary("sounds/alert_large.ogg", false);
dlg("Congratulations "+playername+"! You've successfully unlocked the coin flip minni game. You've also earned an extra "+levcoins+" coins for your hard work. Keep it up!");
}
}
if(key_pressed(KEY_M))
{
speak("You have"+round(coins, 0)+"coins available to spend");
}
if(key_pressed(KEY_R))
{
speak("You're currently rank"+rank+"with"+cookies+"cookies. Your next rank requires"+(cookiesrequiered-cookies)+"cookies");
}
if(key_pressed(KEY_F))
{
if(autocooky==0 and clicktime==1000)
{
speak("You  produce"+autocooky+"cookies per second.");
}
else if(autocooky==0 and clicktime<=999)
{
speak("You  produce"+autocooky+"cookies every"+clicktime+"milliseconds.");
}
else if(autocooky==1 and clicktime==1000)
{
speak("You  produce"+autocooky+"cooky per second.");
}
else if(autocooky==1 and clicktime<=999)
{
speak("You  produce"+autocooky+"cooky every"+clicktime+"milliseconds.");
}
else if(autocooky>=2 and clicktime==1000)
{
speak("You  produce"+autocooky+"cookies per second.");
}
else if(autocooky>=2 and clicktime<=999)
{
speak("You  produce"+autocooky+"cookies every"+clicktime+"milliseconds.");
}
}
if(key_pressed(KEY_C))
{
if(cookies>=0)
{
speak("You baked a total of"+cookies+"cookies.");
}
else if(cookies>=1)
{
speak("You baked a total of"+cookies+"cooky.");
}
else if(cookies>=2)
{
speak("You baked a total of"+cookies+"cookies.");
}
}
if(key_pressed(KEY_H))
{
speak("You are "+round(hunger/maxhunger*100,2)+"percent full from eating cookies.");
}
if(key_pressed(KEY_J))
{
if(manulcooky==0)
{
speak("You  produce"+manulcooky+"cookies per press.");
}
else if(manulcooky==1)
{
speak("You  produce"+manulcooky+"cooky per press.");
}
else if(manulcooky>=2)
{
speak("You  produce"+manulcooky+"cookies per press.");
}
}
if (key_pressed(KEY_ESCAPE))
{
pool.pause_sound(ambslot);
pool.pause_sound(trackslot);
       alertslot=pool.play_stationary("sounds/alert_critical.ogg",false);
    setupmenu();    
    m.add_item_tts("Yes, quit the game without saving");
    m.add_item_tts("Yes, save the game and then quit");
    m.add_item_tts("No, continue playing");
    m.add_item_tts("No, save the game, but continue playing");
    int mres = m.run("Alert! Are you sure you want to quit the game? It's recommended to save your progress before proceeding.", true);
    if (mres == 0)
    {
pool.destroy_sound(alertslot);
pool.resume_sound(ambslot);
pool.resume_sound(trackslot);
        speak("Continuing the game.");
    }
    if (mres == 1)
    {
        speak("Exiting the game without saving.");
wait(500);
        exit();
    }
    if (mres == 2)
    {
        writedata();
        speak("Game saved. Exiting the game.");
wait(500);
        exit();
    }
    if (mres == 3)
    {
pool.destroy_sound(alertslot);
pool.resume_sound(ambslot);
pool.resume_sound(trackslot);
        speak("Continuing the game.");
    }
    if (mres == 4)
    {
        writedata();
pool.destroy_sound(alertslot);
pool.resume_sound(ambslot);
pool.resume_sound(trackslot);
        speak("Game saved. Continuing the game.");
    }
}
}
}
